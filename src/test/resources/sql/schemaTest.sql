DROP TABLE IF EXISTS course_professor;
DROP TABLE IF EXISTS lesson CASCADE;
DROP TABLE IF EXISTS student;
DROP TABLE IF EXISTS course;
DROP TABLE IF EXISTS professor;
DROP TABLE IF EXISTS groups CASCADE;

CREATE TABLE groups (
                         id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                         name VARCHAR(255) NOT NULL,
                         status VARCHAR(20) NOT NULL
);

CREATE TABLE student (
                         id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                         full_name VARCHAR(255) NOT NULL,
                         email VARCHAR(255) NOT NULL,
                         status VARCHAR(20) NOT NULL,
                         group_id int REFERENCES groups(id),
                         FOREIGN KEY (group_id) REFERENCES groups(id)
);

CREATE TABLE professor (
                           id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                           full_name VARCHAR(255) NOT NULL,
                           email VARCHAR(255) NOT NULL,
                           status VARCHAR(20) NOT NULL
);

CREATE TABLE course (
                        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                        name VARCHAR(255) NOT NULL
);

CREATE TABLE course_professor (
                                  course_id int,
                                  professor_id int,
                                  PRIMARY KEY (course_id, professor_id),
                                  FOREIGN KEY (course_id) REFERENCES course(id),
                                  FOREIGN KEY (professor_id) REFERENCES professor(id)
);


CREATE TABLE lesson (
                        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                        course_id int,
                        professor_id int,
                        start_time TIME,
                        finish_time TIME,
                        group_id int,
                        date DATE,
                        FOREIGN KEY (course_id) REFERENCES course(id),
                        FOREIGN KEY (professor_id) REFERENCES professor(id),
                        FOREIGN KEY (group_id) REFERENCES groups(id)
);